// <auto-generated />
using System;
using Data_Access_Layer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data_Access_Layer.Migrations
{
    [DbContext(typeof(ExpenseSharingDbContext))]
    [Migration("20240709042429_add")]
    partial class add
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Data_Access_Layer.Models.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseId"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("PaidById")
                        .HasColumnType("int");

                    b.HasKey("ExpenseId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PaidById");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Data_Access_Layer.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Data_Access_Layer.Models.GroupMember", b =>
                {
                    b.Property<int>("GroupMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupMemberId"), 1L, 1);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSettled")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GroupMemberId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("Data_Access_Layer.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "08fbb1b8-812f-4a27-870e-1c691cfe0c58",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            Id = "7ee19eec-543f-4c33-a443-d77d70e22143",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "admin",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 2,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "050427ae-d5c2-46a8-a40d-e0bf940ba971",
                            Email = "rahul1@gmail.com",
                            EmailConfirmed = false,
                            Id = "8fd393b8-4b81-4843-8572-a919e1624cf4",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "normal",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 3,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "802e1371-bd3e-4a9a-93f6-05bb089c8142",
                            Email = "rahul2@gmail.com",
                            EmailConfirmed = false,
                            Id = "f984c875-99f3-48a3-8161-975db850b2da",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "normal",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 4,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "445834ba-4b92-4f24-8023-494e3701dbd8",
                            Email = "rahul3@gmail.com",
                            EmailConfirmed = false,
                            Id = "8ca43e29-484a-4917-87be-a946b34676da",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "normal",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 5,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "634813e5-2e3e-47c5-9d7b-fd2004c0823a",
                            Email = "rahul4@gmail.com",
                            EmailConfirmed = false,
                            Id = "e197f349-d3c5-43ad-a5a9-d17f638393b2",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "normal",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 6,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "b304a3ab-9745-450b-aa80-2dc3481dc743",
                            Email = "rahul5@gmail.com",
                            EmailConfirmed = false,
                            Id = "da18c94e-b64f-4c08-bc2a-cbd1a774db8f",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "normal",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 7,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "ba8a1d71-cfba-4235-9c8b-9711e39d9e0b",
                            Email = "rahul6@gmail.com",
                            EmailConfirmed = false,
                            Id = "120c8ffb-bb47-49c4-ab02-65383aa39346",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "normal",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 8,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "fe1f8713-09d6-4926-aa5f-e5f77bea8b01",
                            Email = "rahul7@gmail.com",
                            EmailConfirmed = false,
                            Id = "74463796-1cb1-41f8-8f2f-00261101d084",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "normal",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 9,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "0a82c10a-eab7-41d9-a9d1-a98714f17aaf",
                            Email = "rahul8@gmail.com",
                            EmailConfirmed = false,
                            Id = "9e841d25-1a1d-483d-9318-4b1137f9e3f4",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "normal",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Data_Access_Layer.Models.Expense", b =>
                {
                    b.HasOne("Data_Access_Layer.Models.Group", "Group")
                        .WithMany("Expenses")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Access_Layer.Models.User", "PaidBy")
                        .WithMany()
                        .HasForeignKey("PaidById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("PaidBy");
                });

            modelBuilder.Entity("Data_Access_Layer.Models.GroupMember", b =>
                {
                    b.HasOne("Data_Access_Layer.Models.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Access_Layer.Models.User", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data_Access_Layer.Models.Group", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Data_Access_Layer.Models.User", b =>
                {
                    b.Navigation("GroupMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
