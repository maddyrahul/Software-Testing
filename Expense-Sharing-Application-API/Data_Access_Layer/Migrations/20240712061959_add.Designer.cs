// <auto-generated />
using System;
using Data_Access_Layer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data_Access_Layer.Migrations
{
    [DbContext(typeof(ExpenseSharingDbContext))]
    [Migration("20240712061959_add")]
    partial class add
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Data_Access_Layer.Models.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseId"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("PaidById")
                        .HasColumnType("int");

                    b.HasKey("ExpenseId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PaidById");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Data_Access_Layer.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Data_Access_Layer.Models.GroupMember", b =>
                {
                    b.Property<int>("GroupMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupMemberId"), 1L, 1);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSettled")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GroupMemberId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("Data_Access_Layer.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "a9095e3d-d2a9-458e-ba43-fce5fea56943",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            Id = "1778e720-40ff-4386-b798-595635cf65d2",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "admin",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 2,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "67062b57-9854-4aad-8e30-31297005189f",
                            Email = "rahul1@gmail.com",
                            EmailConfirmed = false,
                            Id = "102a2659-c507-49b3-b8a0-bf25badcee8a",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "normal",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 3,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "dc9fa14e-0593-4086-861f-61ad0ad5ae43",
                            Email = "rahul2@gmail.com",
                            EmailConfirmed = false,
                            Id = "04a71a22-e76f-4797-98aa-b91b65b190fb",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "normal",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 4,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "c5d4cddf-52eb-42da-be3e-ee191d6e1aef",
                            Email = "rahul3@gmail.com",
                            EmailConfirmed = false,
                            Id = "d57e3235-1f44-46a6-b11e-f00575fd73b6",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "normal",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 5,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "5a036cde-84eb-4555-a502-ad84cfab846f",
                            Email = "rahul4@gmail.com",
                            EmailConfirmed = false,
                            Id = "2973490a-d8b2-47a7-81cb-8d580a0d67ee",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "normal",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 6,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "bf94fd15-3a42-4c60-a2a8-e77bfb032be7",
                            Email = "rahul5@gmail.com",
                            EmailConfirmed = false,
                            Id = "277b9643-d95b-4c6e-96eb-64c93dfcdf5e",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "normal",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 7,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "04cd3bae-cd87-4a72-9396-2f41f8939c17",
                            Email = "rahul6@gmail.com",
                            EmailConfirmed = false,
                            Id = "ed53f5b3-bff4-4107-a72d-b0eaadc922f4",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "normal",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 8,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "aa5585d1-36cd-4d42-90b7-ef9a9d301245",
                            Email = "rahul7@gmail.com",
                            EmailConfirmed = false,
                            Id = "334b6139-7fbf-4046-9f0a-ab19cd51acdf",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "normal",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 9,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "94bb3905-07d8-4e17-8c32-c915fd6e7d9f",
                            Email = "rahul8@gmail.com",
                            EmailConfirmed = false,
                            Id = "55f2debf-454d-41bf-a8dd-51a2ef075237",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "normal",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Data_Access_Layer.Models.Expense", b =>
                {
                    b.HasOne("Data_Access_Layer.Models.Group", "Group")
                        .WithMany("Expenses")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Access_Layer.Models.User", "PaidBy")
                        .WithMany()
                        .HasForeignKey("PaidById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("PaidBy");
                });

            modelBuilder.Entity("Data_Access_Layer.Models.GroupMember", b =>
                {
                    b.HasOne("Data_Access_Layer.Models.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Access_Layer.Models.User", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data_Access_Layer.Models.Group", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Data_Access_Layer.Models.User", b =>
                {
                    b.Navigation("GroupMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
